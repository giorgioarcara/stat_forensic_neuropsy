x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
# install.packages("faux")
library(faux)
n = 100
x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
# install.packages("faux")
library(faux)
n = 100
x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
# install.packages("faux")
library(faux)
n = 100
x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
# install.packages("faux")
library(faux)
n = 100
x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
# install.packages("faux")
library(faux)
n = 100
x = rnorm(n)
y = rnorm(n)
# correlation
cor(x,y)
# correlation from covariance and standard deviation
( r = cov(x, y)/(sd(x)*sd(y)) )
# correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
#################
# DATA SIMULATION
#################
n = 30
x = rnorm(n)
y = rnorm(n)
n.rep = 20
t_r = 0.4
Rs = NULL
for (iE in 1:n.rep){
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
Rs[iE] = cor(res$X1, res$X2)
}
mean(Rs)
hist(Rs, xlim=c(-1,1), breaks=100)
range(Rs)
45 - (0.3 * 45 )
##########################
# TRUE AND OBSERVED SCORES
##########################
# author: Giorgio Arcara
# ver: 13/10/2023
#################
# DESCRIPTION
###################
# this is a short script to simulate some properties of True and Observed scores
# under assumptions of classical test theory
# X = observed score
# T = True score
# E = error
# E = N(0, sd) # error is distributed "by definition" as a normal variable with 0 mean and a given standard deviation sd
##########################
## simulation paramters
#########################
T = 20 # true score
E.sd = 10 # Error  (sd)
n.obs = 30 # number of observations
T = 20 # true score
E.sd = 10 # Error  (sd)
n.obs = 30 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 30 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
# plot observed score as compared to true score
plot(1:n.obs, Xs)
lines(1:n.obs, Xs)
abline(h=T)
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 2 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
T = 20 # true score
E.sd = 5 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
T = 20 # true score
E.sd = 1 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
T = 20 # true score
E.sd = 0.1 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
##########################
# TRUE AND OBSERVED SCORES
##########################
# author: Giorgio Arcara
# ver: 13/10/2023
#################
# DESCRIPTION
###################
# this is a short script to simulate some properties of True and Observed scores
# under assumptions of classical test theory
# X = observed score
# T = True score
# E = error
# E = N(0, sd) # error is distributed "by definition" as a normal variable with 0 mean and a given standard deviation sd
##########################
## simulation paramters
#########################
T = 20 # true score
E.sd = 0.1 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
# plot observed score as compared to true score
plot(1:n.obs, Xs)
lines(1:n.obs, Xs)
abline(h=T)
