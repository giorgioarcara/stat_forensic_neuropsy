#####################
# UPPER TAIL ONLY  ######
#####################
zobs = -1.4
lower.x <- zobs
upper.x <- 100 # put here a very high number
step <- (upper.x - lower.x) / 1000
sigma <- 1
mu <- 0
bounds <- c(mu-3*sigma, mu+3*sigma)
# colored area
cord.x <- c(lower.x,seq(lower.x,upper.x,step),upper.x)
cord.y <- c(0,dnorm(seq(lower.x,upper.x,step),mu,sigma),0)
# plot_title
plot_title = paste("prob = ", round( pnorm(zobs, mean=mu, sd = sigma, lower.tail=F), 2))
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
polygon(cord.x,cord.y,col='skyblue')
#More or less from: http://www.fernandohrosa.com.br/en/P/shaded_areas_in_r/
#####################
# UPPER TAIL ONLY  ######
#####################
zobs = -1
lower.x <- zobs
upper.x <- 100 # put here a very high number
step <- (upper.x - lower.x) / 1000
sigma <- 1
mu <- 0
bounds <- c(mu-3*sigma, mu+3*sigma)
# colored area
cord.x <- c(lower.x,seq(lower.x,upper.x,step),upper.x)
cord.y <- c(0,dnorm(seq(lower.x,upper.x,step),mu,sigma),0)
# plot_title
plot_title = paste("prob = ", round( pnorm(zobs, mean=mu, sd = sigma, lower.tail=F), 2))
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
polygon(cord.x,cord.y,col='skyblue')
pnorm(-84)
options(digits=20)
pnorm(-84)
options(digits=30)
options(digits=22)
pnorm(-84)
pnorm(-4.5)
options(digits=6)
pnorm(-4.5)
pnorm(-4.5)*2
(1-pnorm(4.5))*2
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
zobs = 4.19
upper.x <- zobs
lower.x <- -100 # put here a very high number
step <- (lower.x - upper.x) / 1000
sigma <- 1
mu <- 0
bounds <- c(mu-3*sigma, mu+3*sigma)
# colored area
cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
plot_title = paste("prob = ", round( pnorm(zobs, mean=mu, sd = sigma, lower.tail=T), 2))
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
polygon(cord.x,cord.y,col='skyblue')
#####################
# TWO TAILS   ######
#####################
zobs = -1.4
## upper tail
zobs_upper = abs(zobs)
lower.x <- zobs_upper
upper.x <- 100 # put here a very high number
step <- (upper.x - lower.x) / 1000
sigma <- 1
mu <- 0
bounds <- c(mu-3*sigma, mu+3*sigma)
# colored area
cord.x <- c(lower.x,seq(lower.x,upper.x,step),upper.x)
cord.y <- c(0,dnorm(seq(lower.x,upper.x,step),mu,sigma),0)
# plot_title
prob1 = pnorm(zobs_upper, mean=mu, sd = sigma, lower.tail=F)
plot_title1 = paste("prob = ", round( prob1, 2))
curve(dnorm(x,mu,sigma),xlim=bounds, main = plot_title)
polygon(cord.x,cord.y,col='skyblue')
## lower tail
zobs_lower= -abs(zobs)
upper.x <- zobs_lower
lower.x <- -100 # put here a very high number
step <- (lower.x - upper.x) / 1000
sigma <- 1
mu <- 0
bounds <- c(mu-3*sigma, mu+3*sigma)
# colored area
cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
prob2 = round( pnorm(zobs_lower, mean=mu, sd = sigma, lower.tail=F), 2)
plot_title2 = paste("prob = ", prob2)
polygon(cord.x,cord.y,col='skyblue')
38.000 + 39.000
77 + 28.000
+ 20000
93+40+28
2000000
2000000*0.2
0.05*449.000
plot(dnorm(seq(-3, 3, 0.1)), type="l")
x = seq(-3, 3, 0.1))
x = seq(-3, 3, 0.1)
plot(x, dnorm(x), type="l")
##########################
# TRUE AND OBSERVED SCORES
##########################
# author: Giorgio Arcara
# ver: 13/10/2023
#################
# DESCRIPTION
###################
# this is a short script to simulate some properties of True and Observed scores
# under assumptions of classical test theory
# X = observed score
# T = True score
# E = error
# E = N(0, sd) # error is distributed "by definition" as a normal variable with 0 mean and a given standard deviation sd
##########################
## simulation paramters
#########################
T = 20 # true score
E.sd = 0.1 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
# plot observed score as compared to true score
plot(1:n.obs, Xs)
lines(1:n.obs, Xs)
abline(h=T)
400.85 + 318.64 + 318.64
400.85 + 318.64
400.85 + 318.64 + 318.64
##########################
# TRUE AND OBSERVED SCORES
##########################
# author: Giorgio Arcara
# ver: 13/10/2023
#################
# DESCRIPTION
###################
# this is a short script to simulate some properties of True and Observed scores
# under assumptions of classical test theory
# X = observed score
# T = True score
# E = error
# E = N(0, sd) # error is distributed "by definition" as a normal variable with 0 mean and a given standard deviation sd
##########################
## simulation paramters
#########################
T = 20 # true score
E.sd = 0.1 # Error  (sd)
n.obs = 200 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Xs[iE] = T + E
}
print(Xs)
mean(Xs) # calculate mean of Observed scores
hist(Xs) # histogram of observed scores
# plot observed score as compared to true score
plot(1:n.obs, Xs)
lines(1:n.obs, Xs)
abline(h=T)
##########################
# TRUE AND OBSERVED SCORES
##########################
# author: Giorgio Arcara
# ver: 13/10/2023
#################
# DESCRIPTION
###################
# this is a short script to simulate some properties of True and Observed scores
# under assumptions of classical test theory
# X = observed score
# T = True score
# E = error
# E = N(0, sd) # error is distributed "by definition" as a normal variable with 0 mean and a given standard deviation sd
##########################
## simulation paramters
#########################
T = 20 # true score
E.sd = 0.1 # Error  (sd)
n.obs = 200 # number of observations
E = rnorm(1, mean = 0, sd = E.sd)
E
E = rnorm(1, mean = 0, sd = E.sd)
E
E = rnorm(1, mean = 0, sd = E.sd)
E
n.obs = 1000 # number of observations
# data simulation
Xs = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Es[iE] = E
Xs[iE] = T + E
}
n.obs = 1000 # number of observations
# data simulation
Xs = NULL
Es = NULL
for (iE in 1:n.obs){
E = rnorm(1, mean = 0, sd = E.sd)
Es[iE] = E
Xs[iE] = T + E
}
Es
mean(Es)
sd(Es)
hist(Es)
40+38+38+6
141000 - 122
45.000/13
45000/13
?factanal
n = 10 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.3 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
n = 100 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.3 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
library(faux)
png("correlations_figure.png")
n = 100 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.3 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
setwd("~")
setwd("~/Documents/Lavori Unipd/Corso Neuropsicologia Forense/git_stat_forensic_neuropsy/code")
library(faux)
png("Figures/correlations_figure.png")
n = 100 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.3 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.3 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 1 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
dev.off()
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 2)))
dev.off()
library(faux)
png("Figures/correlations_figure.png")
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)))
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=120)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)))
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=100)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)), xlab="X", ylab="Y")
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=100)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = -0.9 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)), xlab="X", ylab="Y")
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=100)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)), xlab="X", ylab="Y")
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=100)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
#plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)), xlab="X", ylab="Y")
plot(res$X1, res$X1, main="r = 1", xlab="X", ylab="Y")
dev.off()
library(faux)
png("Figures/correlations_figure.png", res=100)
n = 200 # number of observations from samples (note: n1 must be equal to n2)
mus=c(20,20) # mean of populations from which samples are drawn
t_r = 0 # true underlying correlation
# rnorm_multi (from faux package) simulate random observation from populations with given correlation
res = rnorm_multi(n, mu=c(20, 20), r = t_r)
#plot(res$X1, res$X2, main=paste("r = ", round(cor(res$X1, res$X2), 1)), xlab="X", ylab="Y")
plot(res$X1, -res$X1, main="r = -1", xlab="X", ylab="Y")
dev.off()
# Pearson's correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
## FORMULAS
n = 100
x = rnorm(100, mean = 20, sd = 5)
y = x + rnorm(n, mean=0, sd = 5) # you can simulate a  variable y correlated to x, by adding noise (N(0, sd)) to x. c
# Pearson's correlation from covariance and standard deviation
r = cov(x, y)/(sd(x)*sd(y))
print(r)
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) )/ sd(x)
Zy = (y - mean(y) ) /sd/(y)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) )/ sd(x)
r = Zx*Zy
Zy = (y - mean(y)) /sd/(y)
Zx = ( x - mean(x) )/ sd(x)
x
y
Zy = (y - mean(y)) /sd/(y)
Zy = (y - mean(y)) /sd(y)
r = Zx*Zy
print(r)
r = sum(Zx*Zy)
print(r)
r = mean(Zx*Zy)
print(r)
print(r)
Zx = ( x - mean(x) )/ sd(x)
Zy = (y - mean(y)) /sd(y)
r = mean(Zx*Zy)
print(r)
# Pearson's correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) )/ sd(x)
Zy = (y - mean(y)) /sd(y)
r = mean(Zx*Zy)
print(r)
r = mean(Zx*Zy)
r
Zx = ( x - mean(x) )/ sd(x)
Zx == scale(x)
scale(x)
Zx == as.numeric(scale(x))
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) )/ sd(x)
Zx
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
Zx
Zx
y
Zy = ( y - mean(y) ) / sd(y)
Zy = ( y - mean(y) ) / sd(y)
round(Zx, 4) == round(scale(x), 4)
n = lenght(x)
r = sum(Zx*Zy) / n
print(r)
Zx*Zy
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
n = lenght(x) # or length(y)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / n
print(r)
## FORMULAS
n = 100
x = rnorm(100, mean = 20, sd = 5)
y = x + rnorm(n, mean=0, sd = 5) # you can simulate a  variable y correlated to x, by adding noise (N(0, sd)) to x. c
# Pearson's correlation from covariance and standard deviation
r = cov(x, y)/(sd(x)*sd(y))
print(r)
# Pearson's correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / n
print(r)
# Pearson's correlation, statistical test
cor.test(x, y)
# install.packages("faux")
rm(list=ls())
library(faux)
## FORMULAS
n = 100
x = rnorm(100, mean = 20, sd = 5)
y = x + rnorm(n, mean=0, sd = 5) # you can simulate a  variable y correlated to x, by adding noise (N(0, sd)) to x. c
# Pearson's correlation from covariance and standard deviation
r = cov(x, y)/(sd(x)*sd(y))
print(r)
# Pearson's correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / n
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / var(x)
Zy = ( y - mean(y) ) / var(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / n
print(r)
# Pearsons' correlation via z-scores
Zx = ( x - mean(x) ) / sd(x)
Zy = ( y - mean(y) ) / sd(y)
# Pearsons' correlation via z-scores
Zx = scale(x) #( x - mean(x) ) / sd(x)
Zy = scale(y) #( y - mean(y) ) / sd(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / n
print(r)
r = sum(Zx*Zy) / (n-1)
print(r)
print(r)
# Pearson's correlation from full formula
r =  (sum((x - mean(x)) * (y - mean(y))) ) / ( (sqrt( sum((x - mean(x))^2))) * sqrt( sum((y - mean(y))^2)) )
print(r)
# Pearsons' correlation via z-scores
Zx = scale(x) #( x - mean(x) ) / sd(x)
Zy = scale(y) #( y - mean(y) ) / sd(y)
n = length(x) # or length(y)
r = sum(Zx*Zy) / (n-1)
print(r)
