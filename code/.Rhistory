library(scales)
rm(list=ls())
load("Intermediate_Data/MODEL_RES.RData")
dev.off()
png("Figures/Simulation_nopract.png", res=120, width=800, height=600)
par(oma=c(1, 3, 2, 1))
# SET EMPTY PLOT
plot(NA, xlim=c(1, dim(MODEL_RES)[1]), ylim=c(0, 20), xlab="sample size", ylab="% Type I Error", axes=F, main="SIMULATION RESULTS\n(no practice effect)")
axis(1, at=(1:dim(MODEL_RES)[1]), labels = rownames(MODEL_RES))
axis(2, ylim=c(0,40), at=c(0,5,10,20,30,40,50))
my_colors = hue_pal()(dim(MODEL_RES)[2]) # get nice colors for model
my_pch = 22
abline(h=5, lwd=4, col=alpha(rgb(0,0,0), 0.2), lty=2)
# plot results
# loop over methods
for (iM in 1:dim(MODEL_RES)[2]){
lines(MODEL_RES[,iM])
points(MODEL_RES[,iM], pch=my_pch, col=my_colors[iM], bg= my_colors[iM], cex=1.8)
}
mtext("Expected\nType I Error", 2, at = 5, las=2,col=alpha(rgb(0,0,0), 0.7), cex=0.8, line=5, adj=0.5)
mtext(expression(""%->%""), 2, at = 5, las=2,col=alpha(rgb(0,0,0), 0.7), cex=1, line=2)
par(new=TRUE, oma=c(0,0,0,0), mar=c(0,0,0,0))
plot(NA, xlim=c(0,1), ylim=c(0,1), type="n", axes=F, frame.plot=F)
legend("topright", col = my_colors, legend= colnames(MODEL_RES), pch=my_pch, pt.bg = my_colors)
#plot(NA, xlim=c(0,1), ylim=c(0,1), type="n", axes=F, frame.plot=F)
#text(0.08, 0.25, labels="expected\n value", cex=0.8, col=alpha(rgb(0,0,0), 0.7))
dev.off()
0.05/20
setwd("~/Documents/Lavori Unipd/Corso Neuropsicologia Forense/git_stat_forensic_neuropsy/code")
#
rm(list=ls())
library(MASS)
source("R_functions/CGcut.off.bv.R")
#source("R_functions/CGcut.off.bv_table.R")
n.sim.train = 100
# paramters for normative sample
sim_prac = 0
n_size = c(5, 10, 20, 50)
corr = 0.5
err = 1
n_methods = 4 #number of methods, RCI, mRCI, Portaccio, C&G for determining array dimension
MODEL_RES = array(NA, dim=c(length(n_size), n_methods))
colnames(MODEL_RES)=c("RCI", "mRCI", "P10-regr", "C&G06-regr")
row.names(MODEL_RES)=n_size
### LOOP OVER SAMPLE SIZE
for (iN in 1:length(n_size)){
n = n_size[iN]
RCI_res = NULL
mRCI_res = NULL
RCIp_res = NULL # RCI portaccio et al. 2010 version
CG_res= NULL
for (iSim in 1:n.sim.train){
# STEP 1) BUILD
# simulate predictor
xt0xt1 = mvrnorm(n, mu=c(0,0), Sigma=matrix(c(err,corr,corr,err), nrow=2))
xt0 = xt0xt1[,1]
xt1 = xt0xt1[,2] + sim_prac
#plot(xt0, xt1)
# calculate SEdiff
s1 = sd(xt0)
r = cor(xt0, xt1)
SE=s1*(sqrt(1-r))
SEdiff=sqrt(2*(SE^2))
p_eff = mean(xt1)-mean(xt0)
# C & G
dat = data.frame(xt0, xt1)
mod = lm(xt1~xt0, dat)
## STIMULATE TEST DATA
n_test=100
xt0xt1_test = mvrnorm(n_test, mu=c(0,0), Sigma=matrix(c(err,corr,corr,err), nrow=2))
xt0_test = xt0xt1_test[,1]
xt1_test = xt0xt1_test[,2] + sim_prac
dat_test = data.frame(xt0=xt0_test, xt1=xt1_test)
#plot(xt0_test, xt1_test)
## RCI
z = (xt1_test-xt0_test)/SEdiff
RCI_res[iSim] = sum(z <= -1.645)
## MRCI (modified with pract eff)
mz = ((xt1_test-xt0_test) - p_eff)/SEdiff
mRCI_res[iSim] = sum(mz <= -1.645)
# RCI portaccio et al. 2010 version (p. 613)
pred_xt1 = predict(mod, newdata=list(xt0=xt0_test))
mod.err = summary(mod)$sigma
pz = (xt1_test - pred_xt1)/mod.err
RCIp_res[iSim] = sum(pz <= -1.645)
ps = NULL
for (iTest in 1:dim(dat_test)[1]){
res = CGcut.off.bv(controls_data = dat, model= mod, pred = dat_test$xt0[iTest], Yobs = dat_test$xt1[iTest])
ps[iTest]= res$p.obs
}
CG_res[iSim] = sum(ps < 0.05)
}
# total subject tested
RCI_perf = sum(RCI_res)/(n.sim.train*n_test)*100
mRCI_perf = sum(mRCI_res)/(n.sim.train*n_test)*100
RCIp_perf = sum(RCIp_res)/(n.sim.train*n_test)*100
CG_perf= sum(CG_res)/(n.sim.train*n_test)*100
MODEL_RES[iN, ] = c(RCI_perf, mRCI_perf, RCIp_perf, CG_perf)
}
save(MODEL_RES, file="Intermediate_data/MODEL_RES_pract.RData")
MODEL_RES
### DRAFT! to do a shiny app.
#####################
# LOWER TAIL  ONLY: p(z) ######
#####################
rm(list=ls())
#### GENERATE SAMPLE OF HEALHTY INDIVIDUALS
zobs_1 = -1.64
mu_1 <- 20
sigma_1 <- 5
step_1 <- 1000
#### GENERATE SAMPLE OF PATIENTS
zobs_2 = -1.64
mu_2 <- 10
sigma_2 <- 5
step_2 <- 1000
min_mu = min(mu_1, mu_2)
max_mu = max(mu_1, mu_2)
min_sigma = min(sigma_1, sigma_2)
max_sigma = max(sigma_1, sigma_2)
bounds <- c(min_mu-3*max_sigma, max_mu+3*max_sigma)
# colored area
#cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
#cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
#plot_title = paste("prob = ", round( pnorm(zobs_1, mean=mu_1, sd = sigma_1, lower.tail=T), 2))
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
c1 = curve(dnorm(x,mu_1,sigma_1),xlim=bounds, ylab="Density")
c2 = curve(dnorm(x,mu_2,sigma_2),xlim=bounds, add=TRUE)
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
inters = find_intersection(c1$x, c2$x, c1$y, c2$y)
abline(v = c1$x[inters])
### DRAFT! to do a shiny app.
#####################
# LOWER TAIL  ONLY: p(z) ######
#####################
rm(list=ls())
#### GENERATE SAMPLE OF HEALHTY INDIVIDUALS
zobs_1 = -1.64
mu_1 <- 10
sigma_1 <- 5
step_1 <- 1000
#### GENERATE SAMPLE OF PATIENTS
zobs_2 = -1.64
mu_2 <- 10
sigma_2 <- 5
step_2 <- 1000
min_mu = min(mu_1, mu_2)
max_mu = max(mu_1, mu_2)
min_sigma = min(sigma_1, sigma_2)
max_sigma = max(sigma_1, sigma_2)
bounds <- c(min_mu-3*max_sigma, max_mu+3*max_sigma)
# colored area
#cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
#cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
#plot_title = paste("prob = ", round( pnorm(zobs_1, mean=mu_1, sd = sigma_1, lower.tail=T), 2))
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
c1 = curve(dnorm(x,mu_1,sigma_1),xlim=bounds, ylab="Density")
c2 = curve(dnorm(x,mu_2,sigma_2),xlim=bounds, add=TRUE)
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
inters = find_intersection(c1$x, c2$x, c1$y, c2$y)
abline(v = c1$x[inters])
### DRAFT! to do a shiny app.
#####################
# LOWER TAIL  ONLY: p(z) ######
#####################
rm(list=ls())
#### GENERATE SAMPLE OF HEALHTY INDIVIDUALS
zobs_1 = -1.64
mu_1 <- 5
sigma_1 <- 5
step_1 <- 1000
#### GENERATE SAMPLE OF PATIENTS
zobs_2 = -1.64
mu_2 <- 10
sigma_2 <- 5
step_2 <- 1000
min_mu = min(mu_1, mu_2)
max_mu = max(mu_1, mu_2)
min_sigma = min(sigma_1, sigma_2)
max_sigma = max(sigma_1, sigma_2)
bounds <- c(min_mu-3*max_sigma, max_mu+3*max_sigma)
# colored area
#cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
#cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
#plot_title = paste("prob = ", round( pnorm(zobs_1, mean=mu_1, sd = sigma_1, lower.tail=T), 2))
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
c1 = curve(dnorm(x,mu_1,sigma_1),xlim=bounds, ylab="Density")
c2 = curve(dnorm(x,mu_2,sigma_2),xlim=bounds, add=TRUE)
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
inters = find_intersection(c1$x, c2$x, c1$y, c2$y)
abline(v = c1$x[inters])
abline(mu_1)
mu_1
abline(v=mu_1)
abline(v=mu_2)
### DRAFT! to do a shiny app.
#####################
# LOWER TAIL  ONLY: p(z) ######
#####################
rm(list=ls())
#### GENERATE SAMPLE OF HEALHTY INDIVIDUALS
zobs_1 = -1.64
mu_1 <- 5
sigma_1 <- 5
step_1 <- 1000
#### GENERATE SAMPLE OF PATIENTS
zobs_2 = -1.64
mu_2 <- 10
sigma_2 <- 5
step_2 <- 1000
min_mu = min(mu_1, mu_2)
max_mu = max(mu_1, mu_2)
min_sigma = min(sigma_1, sigma_2)
max_sigma = max(sigma_1, sigma_2)
bounds <- c(min_mu-3*max_sigma, max_mu+3*max_sigma)
# colored area
#cord.x <- c(upper.x,seq(upper.x,lower.x,step),lower.x)
#cord.y <- c(0,dnorm(seq(upper.x,lower.x,step),mu,sigma),0)
# plot_title
#plot_title = paste("prob = ", round( pnorm(zobs_1, mean=mu_1, sd = sigma_1, lower.tail=T), 2))
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
c1 = curve(dnorm(x,mu_1,sigma_1),xlim=bounds, ylab="Density")
c2 = curve(dnorm(x,mu_2,sigma_2),xlim=bounds, add=TRUE)
find_intersection = function(x1, x2, y1, y2, tolx = 0.001, toly=tolx, exclude.edge=T){
inter = which(abs(x1-x2)<tolx & abs(y1-y2)<toly)
if (exclude.edge){
inter = inter[-(c(1, length(inter)))]
}
return(inter)
}
inters = find_intersection(c1$x, c2$x, c1$y, c2$y)
abline(v = c1$x[inters])
###############################
# SENSITIVITY /SPECIFIFICTY AND ROC ANALYSIS
###############################
rm(list=ls())
# In this script I simulate some data for sensitivity, Specificity and ROC analysis.
# to this aim I create two groups (Pathological and Patients), but note that this could be applied for any categorical distinction
# e.g. simulators, for non-simulators, etc.
### Simulate data
n_pat = 50 # number of Pathological individuals
n_contr = 50 # number of Healthy (Controls) individuals
# simulate group of group of Pathologicals
pat_mean = 18
pat_sd = 2
# simulate group of Healthy
contr_mean = 25
contr_sd = 2
pat = rnorm(n_pat, mean=pat_mean, sd=pat_sd)
contr = rnorm(n_contr, mean=contr_mean, sd=contr_sd)
dat = data.frame(Score = c(pat, contr), Group=c(rep("Pathological", n_pat), rep("Healthy", n_contr)))
dat$Group = factor(dat$Group)
head(dat)
#########################
## PLOT HISTOGRAMS  #####
#########################
col_transp = rgb(0.3, 0.4, 0.8, alpha=0.2)
h1 = hist(dat[dat$Group=="Pathological", "Score"], plot=F)
h2 = hist(dat[dat$Group=="Healthy", "Score"], plot=F)
x_range = c( min(c(h1$breaks, h2$breaks)), max(c(h1$breaks, h2$breaks)))
y_range = c( min(c(h1$counts, h2$counts)), max(c(h1$counts, h2$counts)))
Path_scores = dat[dat$Group=="Pathological", "Score"]
Healthy_scores = dat[dat$Group=="Healthy", "Score"]
hist(Path_scores, main="Pathologicals vs Healthy", breaks=10, xlab="", density=10, angle=45, col="black",
xlim=x_range, ylim=y_range)
par(new=TRUE)
hist(Healthy_scores, xlim=range_score, main="", breaks=10, xlab="", col=col_transp, add=TRUE)
legend("topright", legend=c("Pathologicals", "Healthy"), pt.bg=c("white", col_transp),  pch=c(22,22))
###############################
# SENSITIVITY /SPECIFIFICTY AND ROC ANALYSIS
###############################
rm(list=ls())
# In this script I simulate some data for sensitivity, Specificity and ROC analysis.
# to this aim I create two groups (Pathological and Patients), but note that this could be applied for any categorical distinction
# e.g. simulators, for non-simulators, etc.
### Simulate data
n_pat = 50 # number of Pathological individuals
n_contr = 50 # number of Healthy (Controls) individuals
# simulate group of group of Pathologicals
pat_mean = 18
pat_sd = 2
# simulate group of Healthy
contr_mean = 25
contr_sd = 2
pat = rnorm(n_pat, mean=pat_mean, sd=pat_sd)
contr = rnorm(n_contr, mean=contr_mean, sd=contr_sd)
dat = data.frame(Score = c(pat, contr), Group=c(rep("Pathological", n_pat), rep("Healthy", n_contr)))
dat$Group = factor(dat$Group)
head(dat)
#########################
## PLOT HISTOGRAMS  #####
#########################
col_transp = rgb(0.3, 0.4, 0.8, alpha=0.2)
h1 = hist(dat[dat$Group=="Pathological", "Score"], plot=F)
h2 = hist(dat[dat$Group=="Healthy", "Score"], plot=F)
x_range = c( min(c(h1$breaks, h2$breaks)), max(c(h1$breaks, h2$breaks)))
y_range = c( min(c(h1$counts, h2$counts)), max(c(h1$counts, h2$counts)))
Path_scores = dat[dat$Group=="Pathological", "Score"]
Healthy_scores = dat[dat$Group=="Healthy", "Score"]
hist(Path_scores, main="Pathologicals vs Healthy", breaks=10, xlab="", density=10, angle=45, col="black",
xlim=x_range, ylim=y_range)
par(new=TRUE)
hist(Healthy_scores, xlim=range_score, main="", breaks=10, xlab="", col=col_transp, add=TRUE)
legend("topright", legend=c("Pathologicals", "Healthy"), pt.bg=c("white", col_transp),  pch=c(22,22))
###############################
# SENSITIVITY /SPECIFIFICTY AND ROC ANALYSIS
###############################
rm(list=ls())
# In this script I simulate some data for sensitivity, Specificity and ROC analysis.
# to this aim I create two groups (Pathological and Patients), but note that this could be applied for any categorical distinction
# e.g. simulators, for non-simulators, etc.
### Simulate data
n_pat = 50 # number of Pathological individuals
n_contr = 50 # number of Healthy (Controls) individuals
# simulate group of group of Pathologicals
pat_mean = 18
pat_sd = 2
# simulate group of Healthy
contr_mean = 25
contr_sd = 2
pat = rnorm(n_pat, mean=pat_mean, sd=pat_sd)
contr = rnorm(n_contr, mean=contr_mean, sd=contr_sd)
dat = data.frame(Score = c(pat, contr), Group=c(rep("Pathological", n_pat), rep("Healthy", n_contr)))
dat$Group = factor(dat$Group)
head(dat)
#########################
## PLOT HISTOGRAMS  #####
#########################
col_transp = rgb(0.3, 0.4, 0.8, alpha=0.2)
h1 = hist(dat[dat$Group=="Pathological", "Score"], plot=F)
h2 = hist(dat[dat$Group=="Healthy", "Score"], plot=F)
x_range = c( min(c(h1$breaks, h2$breaks)), max(c(h1$breaks, h2$breaks)))
y_range = c( min(c(h1$counts, h2$counts)), max(c(h1$counts, h2$counts)))
Path_scores = dat[dat$Group=="Pathological", "Score"]
Healthy_scores = dat[dat$Group=="Healthy", "Score"]
hist(Path_scores, main="Pathologicals vs Healthy", breaks=10, xlab="", density=10, angle=45, col="black",
xlim=x_range, ylim=y_range)
par(new=TRUE)
hist(Healthy_scores, xlim=range_score, main="", breaks=10, xlab="", col=col_transp, add=TRUE)
legend("topright", legend=c("Pathologicals", "Healthy"), pt.bg=c("white", col_transp),  pch=c(22,22))
###############################
# SENSITIVITY /SPECIFIFICTY AND ROC ANALYSIS
###############################
rm(list=ls())
# In this script I simulate some data for sensitivity, Specificity and ROC analysis.
# to this aim I create two groups (Pathological and Patients), but note that this could be applied for any categorical distinction
# e.g. simulators, for non-simulators, etc.
### Simulate data
n_pat = 50 # number of Pathological individuals
n_contr = 50 # number of Healthy (Controls) individuals
# simulate group of group of Pathologicals
pat_mean = 18
pat_sd = 2
# simulate group of Healthy
contr_mean = 25
contr_sd = 2
pat = rnorm(n_pat, mean=pat_mean, sd=pat_sd)
contr = rnorm(n_contr, mean=contr_mean, sd=contr_sd)
dat = data.frame(Score = c(pat, contr), Group=c(rep("Pathological", n_pat), rep("Healthy", n_contr)))
dat$Group = factor(dat$Group)
head(dat)
#########################
## PLOT HISTOGRAMS  #####
#########################
col_transp = rgb(0.3, 0.4, 0.8, alpha=0.2)
h1 = hist(dat[dat$Group=="Pathological", "Score"], plot=F)
h2 = hist(dat[dat$Group=="Healthy", "Score"], plot=F)
x_range = c( min(c(h1$breaks, h2$breaks)), max(c(h1$breaks, h2$breaks)))
y_range = c( min(c(h1$counts, h2$counts)), max(c(h1$counts, h2$counts)))
Path_scores = dat[dat$Group=="Pathological", "Score"]
Healthy_scores = dat[dat$Group=="Healthy", "Score"]
hist(Path_scores, main="Pathologicals vs Healthy", breaks=10, xlab="", density=10, angle=45, col="black",
xlim=x_range, ylim=y_range)
par(new=TRUE)
hist(Healthy_scores, xlim=range_score, main="", breaks=10, xlab="", col=col_transp, add=TRUE)
legend("topright", legend=c("Pathologicals", "Healthy"), pt.bg=c("white", col_transp),  pch=c(22,22))
###############################
# SENSITIVITY /SPECIFIFICTY AND ROC ANALYSIS
###############################
rm(list=ls())
# In this script I simulate some data for sensitivity, Specificity and ROC analysis.
# to this aim I create two groups (Pathological and Patients), but note that this could be applied for any categorical distinction
# e.g. simulators, for non-simulators, etc.
### Simulate data
n_pat = 50 # number of Pathological individuals
n_contr = 50 # number of Healthy (Controls) individuals
# simulate group of group of Pathologicals
pat_mean = 18
pat_sd = 2
# simulate group of Healthy
contr_mean = 25
contr_sd = 2
pat = rnorm(n_pat, mean=pat_mean, sd=pat_sd)
contr = rnorm(n_contr, mean=contr_mean, sd=contr_sd)
dat = data.frame(Score = c(pat, contr), Group=c(rep("Pathological", n_pat), rep("Healthy", n_contr)))
dat$Group = factor(dat$Group)
head(dat)
#########################
## PLOT HISTOGRAMS  #####
#########################
col_transp = rgb(0.3, 0.4, 0.8, alpha=0.2)
h1 = hist(dat[dat$Group=="Pathological", "Score"], plot=F)
h2 = hist(dat[dat$Group=="Healthy", "Score"], plot=F)
x_range = c( min(c(h1$breaks, h2$breaks)), max(c(h1$breaks, h2$breaks)))
y_range = c( min(c(h1$counts, h2$counts)), max(c(h1$counts, h2$counts)))
Path_scores = dat[dat$Group=="Pathological", "Score"]
Healthy_scores = dat[dat$Group=="Healthy", "Score"]
hist(Path_scores, main="Pathologicals vs Healthy", breaks=10, xlab="", density=10, angle=45, col="black",
xlim=x_range, ylim=y_range)
par(new=TRUE)
hist(Healthy_scores, xlim=range_score, main="", breaks=10, xlab="", col=col_transp, add=TRUE)
legend("topright", legend=c("Pathologicals", "Healthy"), pt.bg=c("white", col_transp),  pch=c(22,22))
(TP + FN)
